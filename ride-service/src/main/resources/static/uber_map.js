const map = L.map('map').setView([48.919293, 24.712843], 13);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '¬© OpenStreetMap contributors'
}).addTo(map);

let taxiMarker;

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Ç–∞–∫—Å—ñ —ñ –ø–æ–±—É–¥–æ–≤–∞ –∫–∞—Ä—Ç–∏
fetch('/rides/map?rideId=2')
    .then(res => res.json())
    .then(data => {
        const {
        vehicleCurrentPosition,
        departure,
        destination,
        toPAXroute,
        route } = data;

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤
        taxiMarker = L.marker(vehicleCurrentPosition, {
            icon: L.icon({
                iconUrl: 'ico/vehicle.png',
                iconSize: [50, 50]
            })
        }).addTo(map).bindPopup("üöñ –¢–∞–∫—Å—ñ");

        L.marker(departure).addTo(map).bindPopup("üìç –ö–ª—ñ—î–Ω—Ç");
        L.marker(destination).addTo(map).bindPopup("üèÅ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è");

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        L.polyline(toPAXroute, { color: 'red', weight: 4 }).addTo(map);
        L.polyline(route, { color: 'blue', weight: 4 }).addTo(map);

        // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
        const bounds = L.latLngBounds([...toPAXroute, ...route]);
        map.fitBounds(bounds);
    });

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞–∫—Å—ñ
/*fetch('/rides/getPosition?vehicleId=1')
    .then(res => res.json())
    .then(currentPosition => {
        if (taxiMarker) {
            taxiMarker.slideTo(currentPosition.currentPosition, {
                duration: 1000,  // –ø–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
                keepAtCenter: false
            });
        }
    });*/

    setInterval(() => {
        fetch('/rides/getPosition?vehicleId=1')
            .then(res => res.json())
            .then(currentPosition => {
                if (taxiMarker) {
                    // –¢–£–¢! –í–∏—Ç—è–≥—É—î–º–æ –º–∞—Å–∏–≤ [lat, lng]
                    taxiMarker.setLatLng(currentPosition);
                }
            });
    }, 3000);


