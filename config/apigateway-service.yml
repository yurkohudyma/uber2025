server:
  port: 9099

spring:
  application:
    name: apigateway-service

  cloud:
    gateway:
      server:
        webflux:
          httpclient:
            connect-timeout: 1000 # мілісекунди
            response-timeout: 2s # або 2000ms

          routes:
            - id: ride-service
              uri: lb://ride-service
              predicates:
                - Path=/ride-service/**
              filters:
                - RewritePath=/ride-service/(?<segment>.*), /${segment}
                - name: CircuitBreaker
                  args:
                    name: rideServiceCircuitBreaker
                    fallbackUri: forward:/fallback/ride-service
              order: -1

            - id: user-service
              uri: lb://user-service
              predicates:
                - Path=/user-service/**
              filters:
                - RewritePath=/user-service/(?<segment>.*), /${segment}
                - name: CircuitBreaker
                  args:
                    name: userServiceCircuitBreaker
                    fallbackUri: forward:/fallback/user-service
              order: -1

            - id: geolocation-service
              uri: lb://geolocation-service
              predicates:
                - Path=/geolocation-service/**
              filters:
                - RewritePath=/geolocation-service/(?<segment>.*), /${segment}
                - name: CircuitBreaker
                  args:
                    name: geolocationServiceCircuitBreaker
                    fallbackUri: forward:/fallback/geolocation-service
              order: -1

            - id: rating-service
              uri: lb://rating-service
              predicates:
                - Path=/rating-service/**
              filters:
                - RewritePath=/rating-service/(?<segment>.*), /${segment}
                - name: CircuitBreaker
                  args:
                    name: ratingServiceCircuitBreaker
                    fallbackUri: forward:/fallback/rating-service
              order: -1

            - id: payment-service
              uri: lb://payment-service
              predicates:
                - Path=/payment-service/**
              filters:
                - RewritePath=/payment-service/(?<segment>.*), /${segment}
                - name: CircuitBreaker
                  args:
                    name: paymentServiceCircuitBreaker
                    fallbackUri: forward:/fallback/payment-service
              order: -1

  kafka:
    bootstrap-servers: localhost:9999
    consumer:
      group-id: uber2025_apigatewayservice
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.web.client.RestTemplate: INFO
    com.netflix.discovery: WARN
    com.netflix.eureka: WARN
    org.springframework.web.HttpLogging: WARN
    org.springframework.cloud.gateway: WARN

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - env
          - prometheus
          - health
          - info
          - metrics

  prometheus:
    metrics:
      export:
        enabled:


resilience4j:
  circuitbreaker:
    instances:
      rideServiceCircuitBreaker:
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 2s
        permittedNumberOfCallsInHalfOpenState: 2
        automaticTransitionFromOpenToHalfOpenEnabled: true

  timelimiter:
    instances:
      rideServiceCircuitBreaker:
        timeoutDuration: 2s
